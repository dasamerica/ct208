# -*- coding: utf-8 -*-
"""ct208_binary_search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e19rTmEBH6H_Xa4XQXbjzmwQ5hkDtgBP
"""

#@title
# Daniela America da Silva
# Exemplos de implementação caso medio binary search

from random import randint
import pandas as pd
import numpy as np
import time, datetime
import matplotlib.pyplot as plt
import math

def BinarySearch(v, l, r, x):
  k = l;
  m = r;
  while(k <= m):
    j = int((k + m)/2)
    if (x == v[j]):
      #return 1
      #ajustei para retornar o npumero de buscas k
      return k
    if (x < v[j]):
      m = j - 1
    else:
      k = j + 1
  return -1

#lista = [1,2,3,4,5]
#print (BinarySearch(lista,0,4,1))

#Inicializa variaveis para o grafico da media
times=[]
counters=[]
counters_calc=[]

counter=0
t0=time.time()

#Inicializa variaveis para o grafico de todas as buscas 
t0_all=time.time()


#define o intervalo de listas
intervalo = 10
#define o numero de vezes que realiza a busca para calculo da média
iteracao = 10

#for s in range(2,1000,intervalo):
for s in range(2,131071,intervalo):
  lista = [] + [0] * s 
  for e in range (s):
      lista[e] = e + 1

  #seta um numero randomico e verifica a média para  execuções de busca 
  soma = 0
  for a in range(iteracao):
      num = randint(1,s)
      conta = BinarySearch(lista,0,s-1,num)
      soma += conta

  media = soma / iteracao
  #print("Tamanho Lista:", len(lista), "Média (30 execuções por lista, numero randomico)", media)

  counters.append(int(media))
  counters_calc.append((int(math.log(s)+0.5)))

  ttime=str(datetime.timedelta(seconds=time.time() - t0))
  times.append(time.time() - t0)


#Exibe gráfico de tempo de processamento
plt.plot(times)

colors = (0,0,0)
area = np.pi*3

#Imprime a média de buscas considerando 10 iterações
x=[0]*len(counters)
y=[0]*len(counters)
for i in range(0,len(counters)):
  x[i] = i
  y[i]=counters[i]

plt.scatter(x, y, s=area, c=colors, alpha=0.5)
plt.show()


#Imprime a média de buscas calculada
x=[0]*len(counters_calc)
y=[0]*len(counters_calc)
for i in range(0,len(counters_calc)):
  x[i] = i
  y[i]=counters_calc[i]

plt.scatter(x, y, s=area, c=colors, alpha=0.5)
plt.show()